<library path="mesh_layers">
    <class name="mesh_layers/BorderLayer"
            type="mesh_layers::BorderLayer"
            base_class_type="mesh_map::AbstractLayer">
        <description>
            A border layer, setting the border vertices of a mesh to high costs. Use this layer to prohibit the robot to navigate to the border of the mesh.
        </description>
    </class>
    <class name="mesh_layers/RoughnessLayer"
            type="mesh_layers::RoughnessLayer"
            base_class_type="mesh_map::AbstractLayer">
        <description>
            A roughness mesh layer, computing the roughness of the surface as cost layer.
        </description>
    </class>
    <class name="mesh_layers/HeightDiffLayer"
            type="mesh_layers::HeightDiffLayer"
            base_class_type="mesh_map::AbstractLayer">
        <description>
            A height differences mesh layer, computing the height differences of the surface as cost layer.
        </description>
    </class>
    <class name="mesh_layers/InflationLayer"
            type="mesh_layers::InflationLayer"
            base_class_type="mesh_map::AbstractLayer">
        <description>
            A inflation mesh layer, computing the inflation of the surface as cost layer.
        </description>
    </class>
    <class name="mesh_layers/SteepnessLayer"
            type="mesh_layers::SteepnessLayer"
            base_class_type="mesh_map::AbstractLayer">
        <description>
            Calculates the steepness of the surface as a cost layer.
        </description>
    </class>
    <class name="mesh_layers/RidgeLayer"
            type="mesh_layers::RidgeLayer"
            base_class_type="mesh_map::AbstractLayer">
        <description>
            Calculates an indicator whether or not a vertex is part of a ridge.
        </description>
    </class>
    <class name="mesh_layers/ClearanceLayer"
            type="mesh_layers::ClearanceLayer"
            base_class_type="mesh_map::AbstractLayer">
        <description>
            Calculates the free space along the vertex normals and uses it to check if the robot fits through a space. Useful for doors, holes etc.
        </description>
    </class>
    <class name="mesh_layers/MaxCombinationLayer"
            type="mesh_layers::MaxCombinationLayer"
            base_class_type="mesh_map::AbstractLayer">
        <description>
            Combines a set of input layers using a max operation
        </description>
    </class>
    <class name="mesh_layers/AvgCombinationLayer"
            type="mesh_layers::AvgCombinationLayer"
            base_class_type="mesh_map::AbstractLayer">
        <description>
            Combines a set of input layers using a weighted average
        </description>
    </class>
    <class name="mesh_layers/ObstacleLayer"
            type="mesh_layers::ObstacleLayer"
            base_class_type="mesh_map::AbstractLayer">
        <description>
            This layer integrates detected obstacles in the form of PointCloud2 messages into the layered MeshMap.
            The obstacle points are projected onto the map's surface by casting a ray along the robots down axis.
        </description>
    </class>
</library>
